"""
Django settings for WebApp project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

if "collectstatic" in sys.argv:
    from .settings_dev import *

    DEBUG = False
elif os.getenv("DJANGO_DEVELOPMENT") == "true":
    logging.warning("running django application in development")
    from .settings_dev import *
else:
    from .settings_prod import *

# ALLOWED_HOSTS = os.environ['ALLOWED_HOSTS'].split(" ")

LOGIN_URL = "Login"
LOGIN_REDIRECT_URL = "Index"

# Application definition

INSTALLED_APPS = [
    "polymorphic",  # app that allows models to be polymorphic
    "MicrosoftAuth",
    "SRS",
    "django_htmx",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

AUTH_USER_MODEL = "MicrosoftAuth.User"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "csp.middleware.CSPMiddleware",
]

# def get_env(setting, env):
#     got = os.environ.get(env)
#     if got:
#         globals()[setting] = tuple(got.split(" "))
#     else:
#         logging.warning(f"{setting} was not set!")

# get_env('CSP_DEFAULT_SRC', 'CSP_DEFAULT_SRC')
# get_env('CSP_NAVIGATE_TO', 'CSP_NAVIGATE_TO')
# get_env("CSP_SCRIPT_SRC", "CSP_SCRIPT_SRC")
# get_env("CSP_SCRIPT_SRC_ELEM", "CSP_SCRIPT_SRC_ELEM")
# get_env("CSP_INCLUDE_NONCE_IN", "CSP_INCLUDE_NONCE_IN")
# get_env("CSP_STYLE_SRC_ELEM", "CSP_STYLE_SRC_ELEM")
# get_env("CSP_FONT_SRC", "CSP_FONT_SRC")
# get_env("CSP_CONNECT_SRC", "CSP_CONNECT_SRC")
# get_env("CSP_MEDIA_SRC", "CSP_MEDIA_SRC")

# tuple(os.environ.get('CSP_DEFAULT_SRC', "").split(" "))
# tuple(os.environ.get('CSP_NAVIGATE_TO', "").split(" "))
# tuple(os.environ.get('CSP_SCRIPT_SRC', "").split(" "))
# tuple(os.environ.get('CSP_SCRIPT_SRC_ELEM', "").split(" "))
# tuple(os.environ.get('CSP_INCLUDE_NONCE_IN', "").split(" "))
# tuple(os.environ.get('CSP_STYLE_SRC_ELEM', "").split(" "))
# tuple(os.environ.get('CSP_FONT_SRC', "").split(" "))
# tuple(os.environ.get('CSP_CONNECT_SRC', "").split(" "))
# tuple(os.environ.get('CSP_MEDIA_SRC', "").split(" "))

CSP_DEFAULT_SRC = ("'self'", "'unsafe-inline'")  # unsafe-inline is insecure (but angular requires it so...)
CSP_NAVIGATE_TO = ("'self'", "https://login.microsoftonline.com")
CSP_SCRIPT_SRC = ("'self'",)
CSP_SCRIPT_SRC_ELEM = ("'self'", "https://unpkg.com")
# CSP_INCLUDE_NONCE_IN = [
#     'script-src',
#     'script-src-elem'
# ]
CSP_STYLE_SRC_ELEM = (
    "'self'",
    "https://www.w3schools.com",
    "https://fonts.googleapis.com",
    "https://cdnjs.cloudflare.com",
    "'unsafe-inline'",
)
CSP_FONT_SRC = ("https://cdnjs.cloudflare.com", "https://fonts.gstatic.com", "https://unpkg.com")
CSP_CONNECT_SRC = ("'self'", "https://unpkg.com")
CSP_MEDIA_SRC = "https://unpkg.com"

AUTHENTICATION_BACKENDS = ["MicrosoftAuth.backends.MicrosoftAuthentication"]

ROOT_URLCONF = "WebApp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "WebApp.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = False  # Time isn't super important for this website, only lengths are.

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

from celery.schedules import crontab

# Celery Config Options

# os.environ['CELERY_BROKER_URL']
# os.environ['CELERY_RESULT_BACKEND']

CELERY_BROKER_URL = "redis://celery_broker:6379/0"
CELERY_RESULT_BACKEND = "redis://celery_broker:6379/1"

# probably works.
CELERY_BEAT_SCHEDULE = {
    "clear-session-midnight-daily": {
        "task": "WebApp.celery.session_cleanup",
        "schedule": crontab(
            minute=0, hour=0, day_of_month="*", month_of_year="*", day_of_week="*"
        ),  # daily at midnight
        "options": {"expires": 15.0},  # if task fails to start in 15 seconds it won't run at all
    }
}
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASL_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
